spring.application.name=order-service
spring.datasource.url=jdbc:mysql://localhost:3306/order_service
spring.datasource.username=root
spring.datasource.password=mysql
spring.jpa.hibernate.ddl-auto=none
server.port=8081
inventory.url=http://localhost:8082
springdoc.swagger.ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs

#Actuator Endpoints
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#below properties 4 added after grafana loki promethues configuration done
#management.endpoints.web.exposure.include=health, info, metrics, prometheus
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.observations.key-values.application=product-service

#below is mandatory to add to generating tracing
management.tracing.sampling.probability=1.0

#Resilience4j properties here we are using inventory instead of default as we have added the name in CircuitBreaker name @CircuitBreaker(name="inventory" in InventoryClient.java file
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.slidingWindowTpe=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=10
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.inventory.minimum-number-of-calls=5

#Resilience4j Timeout Properties
resilience4j.timelimiter.instances.inventory.timeout-duration=3s


#Resilience4j Retry Properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=2s

#kafka properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=order-placed
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.kafka.producer.properties.schema.registry.url=http://127.0.0.1:8085

#kafka ui is available at http://localhost:8086

#vimp below all comments
#as we are running mysql using docker
#order_service db will not be present
#so to create our db if it does not exits in mysql
#we have created docker/myqsql folder
#and added file init.sql with create db sql
#then we have added this init.sql file to be loaded by docker
#using       - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql in volumes
#so what we are doing is we are copying this file in docker-entrypoint/initdb.d folder
#so this init.sql file will be executed when mysql is starting up


#flyweigh helps us to create versioning / migration
#advantage = we can rollback if any error while doing migration
#we usualy store the migration scripts in resources/db.migration folder
#so now using above init.sql we were able to create database in mysql
#now to create the table we are using flyweigh , and added the first version as
#V1__init.sql file - and added the create table script
#if we get any error while starting saying
#FlywayValidateException: Validate failed: Migrations have failed validation
#then goto workbench and \
#  Go to flyway_schema_history in your DB
#Delete the row containing the sql migration script
#so after starting the spring boot app, this versioned script will create the table

#so for any changes like adding new table or column / removing table or column we need to create another new version
#in flyweigh for migration ex - to add column we can create new file like V2__add_column.sql -->>remember we have 2 _ after version
